name: Run Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Initialize test database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "
          CREATE TABLE IF NOT EXISTS test_table (
            id SERIAL PRIMARY KEY,
            name VARCHAR(100),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          INSERT INTO test_table (name) VALUES ('test1'), ('test2'), ('test3');
          "

      - name: Run basic health check test
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/postgres
        run: |
          python -c "
          import asyncio
          from app.db import DatabaseManager

          async def test():
              db = DatabaseManager()
              assert await db.test_connection(), 'Database connection failed'
              tables = await db.list_tables()
              assert len(tables) > 0, 'No tables found'
              print(f'Found {len(tables)} tables: {[t[\"table_name\"] for t in tables]}')
              
          asyncio.run(test())
          "
