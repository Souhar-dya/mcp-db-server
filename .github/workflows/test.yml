name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: mcp-db-server

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: mysql
          MYSQL_DATABASE: testdb
          MYSQL_USER: mysql
          MYSQL_PASSWORD: mysql
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Wait for databases
        run: |
          echo "Waiting for PostgreSQL..."
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "PostgreSQL not ready, waiting..."
            sleep 2
          done

          echo "Waiting for MySQL..."
          until mysqladmin ping -h 127.0.0.1 -P 3306 -u mysql -pmysql --silent; do
            echo "MySQL not ready, waiting..."
            sleep 2
          done

      - name: Initialize PostgreSQL test database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d testdb -c "
          CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            email VARCHAR(100) UNIQUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          CREATE TABLE IF NOT EXISTS products (
            id SERIAL PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            price DECIMAL(10,2),
            stock INTEGER DEFAULT 0
          );
          INSERT INTO users (name, email) VALUES 
            ('John Doe', 'john@example.com'),
            ('Jane Smith', 'jane@example.com'),
            ('Bob Johnson', 'bob@example.com');
          INSERT INTO products (name, price, stock) VALUES
            ('Laptop', 999.99, 10),
            ('Mouse', 29.99, 50),
            ('Keyboard', 79.99, 25);
          "

      - name: Initialize MySQL test database
        run: |
          mysql -h 127.0.0.1 -P 3306 -u mysql -pmysql testdb -e "
          CREATE TABLE IF NOT EXISTS orders (
            id INT AUTO_INCREMENT PRIMARY KEY,
            customer_name VARCHAR(100) NOT NULL,
            total_amount DECIMAL(10,2),
            order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          INSERT INTO orders (customer_name, total_amount) VALUES
            ('Alice Brown', 1299.97),
            ('Charlie Wilson', 109.98),
            ('Diana Clark', 79.99);
          "

      - name: Run comprehensive tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/testdb
          MYSQL_URL: mysql+aiomysql://mysql:mysql@localhost:3306/testdb
        run: |
          # Test PostgreSQL connection and queries
          python -c "
          import asyncio
          import os
          from app.db import DatabaseManager

          # Ensure environment variable is set
          os.environ['DATABASE_URL'] = 'postgresql+asyncpg://postgres:postgres@localhost:5432/testdb'
          print(f'Using DATABASE_URL: {os.environ[\"DATABASE_URL\"]}')

          async def test_postgresql():
              print('=== Testing PostgreSQL ===')
              db = DatabaseManager()
              print(f'DatabaseManager URL: {db.database_url}')
              print(f'DatabaseManager Type: {db.database_type}')
              
              # Test connection
              assert await db.test_connection(), 'PostgreSQL connection failed'
              print('PostgreSQL connection successful')
              
              # Test listing tables
              tables = await db.list_tables()
              print(f'Raw tables result: {tables}')
              if tables:
                  print(f'First table keys: {list(tables[0].keys())}')
              assert len(tables) >= 2, f'Expected at least 2 tables, got {len(tables)}'
              print(f'✅ Found {len(tables)} tables: {[t[\"table_name\"] for t in tables]}')
              
              # Test describe table
              user_schema = await db.describe_table('users')
              assert len(user_schema) > 0, 'users table schema is empty'
              print(f'Users table schema: {len(user_schema)} columns')
              
              # Test query execution
              result = await db.execute_safe_query('SELECT COUNT(*) as count FROM users')
              assert len(result) > 0, 'Query returned no results'
              assert result[0]['count'] == 3, 'Expected 3 users'
              print('Query execution successful')
              
              print('PostgreSQL tests completed successfully')

          async def test_mysql():
              print('=== Testing MySQL ===')
              os.environ['DATABASE_URL'] = 'mysql+aiomysql://mysql:mysql@localhost:3306/testdb'
              print(f'Using DATABASE_URL: {os.environ[\"DATABASE_URL\"]}')
              db = DatabaseManager()
              print(f'DatabaseManager URL: {db.database_url}')
              print(f'DatabaseManager Type: {db.database_type}')
              
              # Test connection
              assert await db.test_connection(), 'MySQL connection failed'
              print('MySQL connection successful')
              
              # Test listing tables
              tables = await db.list_tables()
              print(f'Raw tables result: {tables}')
              if tables:
                  print(f'First table keys: {list(tables[0].keys())}')
              assert len(tables) >= 1, f'Expected at least 1 table, got {len(tables)}'
              print(f'✅ Found {len(tables)} tables: {[t[\"table_name\"] for t in tables]}')
              
              # Test query execution
              result = await db.execute_safe_query('SELECT COUNT(*) as count FROM orders')
              assert len(result) > 0, 'MySQL query returned no results'
              assert result[0]['count'] == 3, 'Expected 3 orders'
              print('✅ MySQL query execution successful')
              
              print('✅ MySQL tests completed successfully')

          async def main():
              await test_postgresql()
              await test_mysql()
              print('All database tests passed!')

          asyncio.run(main())
          "

      - name: Run MCP server tests (SQLite only)
        env:
          DATABASE_URL: sqlite+aiosqlite:///test_mcp.db
        run: |
          echo "Skipping MCP server tests for now - will enable after basic tests pass"
          # python test_mcp_tools.py

      - name: Run live integration tests (SQLite only)
        env:
          DATABASE_URL: sqlite+aiosqlite:///test_live.db
        run: |
          echo "Skipping live integration tests for now - will enable after basic tests pass"
          # python live_test.py

      - name: Test SQLite functionality
        env:
          DATABASE_URL: sqlite+aiosqlite:///test_ci.db
        run: |
          python -c "
          import asyncio
          import os
          from app.db import DatabaseManager

          async def test_sqlite():
              print('=== Testing SQLite ===')
              # Ensure environment variable is set
              os.environ['DATABASE_URL'] = 'sqlite+aiosqlite:///test_ci.db'
              print(f'Using DATABASE_URL: {os.environ[\"DATABASE_URL\"]}')
              
              db = DatabaseManager()
              print(f'DatabaseManager URL: {db.database_url}')
              print(f'DatabaseManager Type: {db.database_type}')
              
              # Test connection
              assert await db.test_connection(), 'SQLite connection failed'
              print('✅ SQLite connection successful')
              
              # Test listing tables (should work even with empty database)
              tables = await db.list_tables()
              print(f'✅ Found {len(tables)} tables in SQLite database')
              
              # Test a simple query that works on all SQLite databases
              result = await db.execute_safe_query('SELECT 1 as test_value')
              assert len(result) > 0, 'SQLite query returned no results'
              assert result[0]['test_value'] == 1, 'Expected test_value to be 1'
              print('✅ SQLite functionality test passed')

          asyncio.run(test_sqlite())
          "
